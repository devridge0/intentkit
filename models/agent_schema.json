{
  "$schema": "https://json-schema.org/draft/2020-12/schema#",
  "title": "Agent",
  "description": "Agent model",
  "type": "object",
  "x-groups": [
    {
      "id": "basic",
      "title": "Basic",
      "order": 1
    },
    {
      "id": "ai",
      "title": "AI Model",
      "order": 2
    },
    {
      "id": "autonomous",
      "title": "Autonomous",
      "order": 3
    },
    {
      "id": "onchain",
      "title": "On-Chain",
      "order": 4
    },
    {
      "id": "entrypoint",
      "title": "Entrypoint",
      "order": 5
    },
    {
      "id": "skills",
      "title": "Skills",
      "order": 6
    },
    {
      "id": "experimental",
      "title": "Experimental",
      "order": 7
    },
    {
      "id": "deprecated",
      "title": "Deprecated",
      "order": 8
    },
    {
      "id": "internal",
      "title": "Internal",
      "order": 9
    }
  ],
  "required": [
    "name",
    "ticker",
    "picture",
    "purpose",
    "personality",
    "model",
    "mode"
  ],
  "properties": {
    "name": {
      "type": "string",
      "description": "Display name of the agent",
      "maxLength": 50,
      "x-group": "basic",
      "x-placeholder": "Enter agent name"
    },
    "description": {
      "type": "string",
      "description": "Description of the agent, for public view, not contained in prompt",
      "x-group": "basic",
      "x-placeholder": "Introduce your agent"
    },
    "external_website": {
      "type": "string",
      "description": "Link of external website of the agent, if you have one",
      "format": "uri",
      "x-group": "basic",
      "x-placeholder": "Enter agent external website url"
    },
    "picture": {
      "type": "string",
      "description": "Picture of the agent",
      "x-group": "basic",
      "x-placeholder": "Upload a picture of your agent"
    },
    "ticker": {
      "type": "string",
      "description": "Ticker symbol of the agent",
      "maxLength": 10,
      "minLength": 3,
      "x-group": "basic",
      "x-placeholder": "Enter agent ticker"
    },
    "token_address": {
      "type": "string",
      "description": "Token address of the agent",
      "maxLength": 42,
      "readOnly": true,
      "x-group": "internal"
    },
    "token_pool": {
      "type": "string",
      "description": "Pool of the agent token",
      "maxLength": 42,
      "readOnly": true,
      "x-group": "internal"
    },
    "mode": {
      "type": "string",
      "description": "Mode of the agent, public or private",
      "enum": [
        "public",
        "private"
      ],
      "x-group": "basic"
    },
    "slug": {
      "type": "string",
      "description": "Slug of the agent, used for URL generation",
      "maxLength": 30,
      "minLength": 2,
      "readOnly": true,
      "x-group": "internal"
    },
    "purpose": {
      "type": "string",
      "description": "Purpose or role of the agent",
      "maxLength": 20000,
      "pattern": "^(([^#].*)|#[^# ].*|#{3,}[ ].*|$)(\n(([^#].*)|#[^# ].*|#{3,}[ ].*|$))*$",
      "errorMessage": {
        "pattern": "Level 1 and 2 headings (# and ##) are not allowed. Please use level 3+ headings (###, ####, etc.) instead."
      },
      "x-group": "basic",
      "x-placeholder": "Enter agent purpose"
    },
    "personality": {
      "type": "string",
      "description": "Personality traits of the agent",
      "maxLength": 20000,
      "pattern": "^(([^#].*)|#[^# ].*|#{3,}[ ].*|$)(\n(([^#].*)|#[^# ].*|#{3,}[ ].*|$))*$",
      "errorMessage": {
        "pattern": "Level 1 and 2 headings (# and ##) are not allowed. Please use level 3+ headings (###, ####, etc.) instead."
      },
      "x-group": "basic",
      "x-placeholder": "Enter agent personality"
    },
    "principles": {
      "type": "string",
      "description": "Principles or values of the agent",
      "maxLength": 20000,
      "pattern": "^(([^#].*)|#[^# ].*|#{3,}[ ].*|$)(\n(([^#].*)|#[^# ].*|#{3,}[ ].*|$))*$",
      "errorMessage": {
        "pattern": "Level 1 and 2 headings (# and ##) are not allowed. Please use level 3+ headings (###, ####, etc.) instead."
      },
      "x-group": "basic",
      "x-placeholder": "Enter agent principles"
    },
    "owner": {
      "type": "string",
      "description": "Owner identifier of the agent, used for access control",
      "readOnly": true,
      "maxLength": 50,
      "x-group": "internal"
    },
    "upstream_id": {
      "type": "string",
      "description": "External reference ID for idempotent operations",
      "readOnly": true,
      "maxLength": 100,
      "x-group": "internal"
    },
    "model": {
      "type": "string",
      "description": "AI model identifier to be used by this agent for processing requests. Available models: gpt-4o, gpt-4o-mini, deepseek-chat, deepseek-reasoner, grok-2, eternalai",
      "default": "gpt-4o-mini",
      "enum": [
        "gpt-4o",
        "gpt-4o-mini",
        "deepseek-chat",
        "deepseek-reasoner",
        "grok-2",
        "eternalai"
      ],
      "x-group": "ai"
    },
    "prompt": {
      "type": "string",
      "description": "Base system prompt that defines the agent's behavior and capabilities",
      "maxLength": 20000,
      "pattern": "^(([^#].*)|#[^# ].*|#{3,}[ ].*|$)(\n(([^#].*)|#[^# ].*|#{3,}[ ].*|$))*$",
      "errorMessage": {
        "pattern": "Level 1 and 2 headings (# and ##) are not allowed. Please use level 3+ headings (###, ####, etc.) instead."
      },
      "x-group": "ai"
    },
    "prompt_append": {
      "type": "string",
      "description": "Additional system prompt that has higher priority than the base prompt",
      "maxLength": 20000,
      "pattern": "^(([^#].*)|#[^# ].*|#{3,}[ ].*|$)(\n(([^#].*)|#[^# ].*|#{3,}[ ].*|$))*$",
      "errorMessage": {
        "pattern": "Level 1 and 2 headings (# and ##) are not allowed. Please use level 3+ headings (###, ####, etc.) instead."
      },
      "x-group": "ai"
    },
    "temperature": {
      "type": "number",
      "description": "The randomness of the generated results is such that the higher the number, the more creative the results will be. However, this also makes them wilder and increases the likelihood of errors. For creative tasks, you can adjust it to above 1, but for rigorous tasks, such as quantitative trading, it's advisable to set it lower, around 0.2. (0.0~2.0)",
      "default": 0.7,
      "minimum": 0.0,
      "maximum": 2.0,
      "x-group": "ai"
    },
    "frequency_penalty": {
      "type": "number",
      "description": "The frequency penalty is a measure of how much the AI is allowed to repeat itself. A lower value means the AI is more likely to repeat previous responses, while a higher value means the AI is more likely to generate new content. For creative tasks, you can adjust it to 1 or a bit higher. (-2.0~2.0)",
      "default": 0.0,
      "minimum": -2.0,
      "maximum": 2.0,
      "x-group": "ai"
    },
    "presence_penalty": {
      "type": "number",
      "description": "The presence penalty is a measure of how much the AI is allowed to deviate from the topic. A higher value means the AI is more likely to deviate from the topic, while a lower value means the AI is more likely to follow the topic. For creative tasks, you can adjust it to 1 or a bit higher. (-2.0~2.0)",
      "default": 0.0,
      "minimum": -2.0,
      "maximum": 2.0,
      "x-group": "ai"
    },
    "autonomous": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the autonomous configuration",
            "minLength": 1,
            "maxLength": 20,
            "pattern": "^[a-z0-9-]+$",
            "x-group": "autonomous"
          },
          "name": {
            "type": "string",
            "description": "Display name of the autonomous configuration",
            "maxLength": 50,
            "x-group": "autonomous"
          },
          "description": {
            "type": "string",
            "description": "Description of the autonomous configuration",
            "maxLength": 200,
            "x-group": "autonomous"
          },
          "minutes": {
            "type": "integer",
            "description": "Interval in minutes between operations, mutually exclusive with cron",
            "default": 1440,
            "x-group": "autonomous"
          },
          "cron": {
            "type": "string",
            "description": "Cron expression for scheduling operations, mutually exclusive with minutes",
            "x-group": "autonomous"
          },
          "prompt": {
            "type": "string",
            "description": "Special prompt used during autonomous operation",
            "maxLength": 20000,
            "x-group": "autonomous"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the autonomous configuration is enabled",
            "default": false,
            "x-group": "autonomous"
          }
        },
        "required": [
          "id",
          "prompt"
        ]
      },
      "description": "Autonomous agent configurations.\nautonomous:\n  - id: a\n    name: TestA\n    minutes: 1\n    prompt: |-\n      Say hello [sequence], use number for sequence.\n  - id: b\n    name: TestB\n    cron: \"0/3 * * * *\"\n    prompt: |-\n      Say hi [sequence], use number for sequence.",
      "x-group": "autonomous",
      "x-inline": true
    },
    "autonomous_minutes": {
      "type": "integer",
      "description": "Interval in minutes between autonomous operations when enabled",
      "default": 240,
      "deprecated": true,
      "x-group": "deprecated"
    },
    "autonomous_prompt": {
      "type": "string",
      "description": "Special prompt used during autonomous operation mode",
      "deprecated": true,
      "x-group": "deprecated"
    },
    "autonomous_enabled": {
      "type": "boolean",
      "description": "Whether the agent can operate autonomously without user input",
      "default": false,
      "deprecated": true,
      "x-group": "deprecated"
    },
    "cdp_enabled": {
      "type": "boolean",
      "description": "Whether CDP (Crestal Development Platform) integration is enabled",
      "default": false,
      "x-group": "onchain"
    },
    "cdp_skills": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of CDP skills available to this agent",
      "deprecated": true,
      "x-group": "deprecated"
    },
    "cdp_network_id": {
      "type": "string",
      "description": "Network identifier for CDP integration",
      "default": "base-mainnet",
      "enum": [
        "ethereum-mainnet",
        "ethereum-sepolia",
        "polygon-mainnet",
        "polygon-mumbai",
        "base-mainnet",
        "base-sepolia",
        "arbitrum-mainnet",
        "arbitrum-sepolia",
        "optimism-mainnet",
        "optimism-sepolia"
      ],
      "x-group": "onchain"
    },
    "crossmint_config": {
      "type": "object",
      "description": "Dict of Crossmint wallet configurations",
      "x-group": "experimental"
    },
    "goat_enabled": {
      "type": "boolean",
      "description": "Whether GOAT integration is enabled",
      "default": false,
      "x-group": "experimental"
    },
    "goat_skills": {
      "type": "object",
      "description": "Dict of GOAT skills and their corresponding configurations",
      "x-group": "experimental"
    },
    "twitter_entrypoint_enabled": {
      "type": "boolean",
      "description": "Dangerous, reply all mentions from x.com",
      "default": false,
      "x-group": "entrypoint"
    },
    "twitter_config": {
      "type": "object",
      "description": "You must use your own key for twitter entrypoint, it is separated from twitter skills",
      "x-group": "entrypoint"
    },
    "twitter_skills": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of Twitter-specific skills available to this agent",
      "deprecated": true,
      "x-group": "deprecated"
    },
    "telegram_entrypoint_enabled": {
      "type": "boolean",
      "description": "Whether the agent can receive events from Telegram",
      "default": false,
      "x-group": "social"
    },
    "telegram_config": {
      "type": "object",
      "description": "Telegram integration configuration settings",
      "x-group": "social"
    },
    "telegram_skills": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of Telegram-specific skills available to this agent",
      "deprecated": true,
      "x-group": "deprecated"
    },
    "crestal_skills": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of Crestal platform-specific skills available to this agent",
      "deprecated": true,
      "x-group": "deprecated"
    },
    "common_skills": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of general-purpose skills available to this agent",
      "deprecated": true,
      "x-group": "deprecated"
    },
    "skills": {
      "type": "object",
      "description": "Dict of skills and their corresponding configurations",
      "x-group": "skills",
      "x-inline": true,
      "properties": {
        "cdp": {
          "$ref": "../skills/cdp/schema.json"
        },
        "twitter": {
          "$ref": "../skills/twitter/schema.json"
        },
        "acolyt": {
          "$ref": "../skills/acolyt/schema.json"
        },
        "allora": {
          "$ref": "../skills/allora/schema.json"
        },
        "cryptocompare": {
          "$ref": "../skills/cryptocompare/schema.json"
        },
        "elfa": {
          "$ref": "../skills/elfa/schema.json"
        },
        "slack": {
          "$ref": "../skills/slack/schema.json"
        },
        "common": {
          "$ref": "../skills/common/schema.json"
        }
      }
    },
    "enso_enabled": {
      "type": "boolean",
      "description": "Whether Enso integration is enabled",
      "default": false,
      "x-group": "experimental"
    },
    "enso_skills": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of Enso-specific skills available to this agent",
      "x-group": "experimental"
    },
    "enso_config": {
      "type": "object",
      "description": "Enso integration configuration settings",
      "x-group": "experimental"
    },
    "acolyt_skills": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of Acolyt-specific skills available to this agent",
      "deprecated": true,
      "x-group": "deprecated"
    },
    "acolyt_config": {
      "type": "object",
      "description": "Acolyt integration configuration settings",
      "deprecated": true,
      "x-group": "deprecated"
    },
    "allora_skills": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of Allora-specific skills available to this agent",
      "deprecated": true,
      "x-group": "deprecated"
    },
    "allora_config": {
      "type": "object",
      "description": "Allora integration configuration settings",
      "deprecated": true,
      "x-group": "deprecated"
    },
    "elfa_skills": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of Elfa-specific skills available to this agent",
      "deprecated": true,
      "x-group": "deprecated"
    },
    "elfa_config": {
      "type": "object",
      "description": "Elfa integration configuration settings",
      "deprecated": true,
      "x-group": "deprecated"
    },
    "wallet_provider": {
      "type": "string",
      "description": "Provider of the agent's wallet",
      "enum": [
        "cdp"
      ],
      "x-group": "onchain"
    },
    "network_id": {
      "type": "string",
      "description": "Network identifier",
      "default": "base-mainnet",
      "enum": [
        "ethereum-mainnet",
        "ethereum-sepolia",
        "polygon-mainnet",
        "polygon-mumbai",
        "base-mainnet",
        "base-sepolia",
        "arbitrum-mainnet",
        "arbitrum-sepolia",
        "optimism-mainnet",
        "optimism-sepolia",
        "solana"
      ],
      "x-group": "onchain"
    }
  },
  "additionalProperties": false
}